# syntax=docker/dockerfile:experimental
FROM python:3.10 as base
SHELL ["/bin/bash", "--login", "-c"]
EXPOSE 5001
RUN apt update && apt install -y tree && apt clean

# Install the older version of mdbtools (0.7.1) until https://github.com/echemdata/galvani/issues/89 is resolved
WORKDIR /opt
RUN curl -L https://github.com/mdbtools/mdbtools/archive/refs/tags/0.7.1.zip > 0.7.1.zip && unzip -d /opt/mdbtools 0.7.1.zip && rm 0.7.1.zip
WORKDIR /opt/mdbtools/mdbtools-0.7.1
RUN autoreconf -i -f &&  ./configure --disable-man && make -j 4 && make install && ldconfig


FROM base as app
# Copy all server code into workdir
WORKDIR /app
RUN pip install pipenv

COPY pydatalab/Pipfile pydatalab/Pipfile.lock ./

# Create development image using flask's dev server with hot-reload
FROM app as development
RUN --mount=type=cache,target=/root/.cache/pip pipenv sync
ENV FLASK_APP "pydatalab.main:create_app()"
ENV FLASK_ENV "development"
CMD ["pipenv", "run", "flask", "run", "--port", "5001", "--host", "0.0.0.0"]

# Create production image using gunicorn and minimal dependencies
FROM app as production
RUN --mount=type=cache,target=/root/.cache/pip pipenv sync
RUN [ "pipenv", "run", "pip", "install", "gunicorn" ]
COPY ./pydatalab/ ./

CMD ["pipenv", "run", \
     "gunicorn", \
     "-w", "2", \
     "--error-logfile", "/logs/pydatalab_error.log", \
     "--access-logfile", "-", \
     "-b", "0.0.0.0:5001", \
     "pydatalab.main:create_app()" \
]
