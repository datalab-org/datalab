# syntax=docker/dockerfile:experimental
FROM python:3.10 as base
SHELL ["/bin/bash", "--login", "-c"]

# Useful for installing deps from git, preventing big downloads and bandwith quotas
ENV GIT_LFS_SKIP_SMUDGE=1

# Install system dependencies
RUN apt update && apt install -y gnupg curl tree mdbtools && apt clean

# Install MongoDB tools in the official way
WORKDIR /opt
RUN wget https://fastdl.mongodb.org/tools/db/mongodb-database-tools-ubuntu2204-x86_64-100.9.0.deb && apt install ./mongodb-database-tools-*-100.9.0.deb

FROM base as app

WORKDIR /app

RUN pip install pipenv

COPY pydatalab/Pipfile pydatalab/Pipfile.lock pydatalab/pyproject.toml .

# Create development image using flask's dev server with hot-reload
FROM app as development
RUN --mount=type=cache,target=/root/.cache/pip pipenv sync
ENV FLASK_APP "pydatalab.main:create_app()"
ENV FLASK_ENV "development"
ENV PORT=5001

CMD ["/bin/bash", "-c", "pipenv run flask run --reload --port ${PORT} --host 0.0.0.0"]

# Create production image using gunicorn and minimal dependencies
FROM app as production
RUN --mount=type=cache,target=/root/.cache/pip pipenv sync
RUN [ "pipenv", "run", "pip", "install", "gunicorn" ]
COPY ./pydatalab/ ./

# Install the local version of the package and mount the repository data to get version info
RUN --mount=type=bind,target=/app/.git,source=./.git ["pipenv", "run", "pip", "install", "."]

# This will define the number of gunicorn workers
ARG WEB_CONCURRENCY=4
ENV WEB_CONCURRENCY=${WEB_CONCURRENCY}

ARG PORT=5001
EXPOSE ${PORT}
ENV PORT=${PORT}

CMD ["/bin/bash", "-c", "pipenv run gunicorn --preload -w ${WEB_CONCURRENCY} --error-logfile /logs/pydatalab_error.log --access-logfile - -b 0.0.0.0:${PORT} 'pydatalab.main:create_app()'"]

HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 CMD curl --fail http://localhost:${PORT}/healthcheck/is_ready || exit 1
